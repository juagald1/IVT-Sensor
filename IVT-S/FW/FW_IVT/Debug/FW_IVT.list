
FW_IVT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fec  08001fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ff4  08001ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002008  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e5a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b4  00000000  00000000  00025e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00027348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000470  00000000  00000000  00027860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd98  00000000  00000000  00027cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006011  00000000  00000000  00044a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7529  00000000  00000000  0004aa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1fa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001354  00000000  00000000  000f1ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001fa4 	.word	0x08001fa4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001fa4 	.word	0x08001fa4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Start_IVT_Sensor>:
	  }
}



void Start_IVT_Sensor (void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

	Datos[0] = SET_MODE; Datos[1] = Run; Datos[2]=Run;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000522:	2234      	movs	r2, #52	; 0x34
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000528:	2201      	movs	r2, #1
 800052a:	705a      	strb	r2, [r3, #1]
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800052e:	2201      	movs	r2, #1
 8000530:	709a      	strb	r2, [r3, #2]
	Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	71da      	strb	r2, [r3, #7]
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800053a:	79da      	ldrb	r2, [r3, #7]
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800053e:	719a      	strb	r2, [r3, #6]
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000542:	799a      	ldrb	r2, [r3, #6]
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000546:	715a      	strb	r2, [r3, #5]
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800054a:	795a      	ldrb	r2, [r3, #5]
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800054e:	711a      	strb	r2, [r3, #4]
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000552:	791a      	ldrb	r2, [r3, #4]
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <Start_IVT_Sensor+0x4c>)
 8000556:	70da      	strb	r2, [r3, #3]

	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000558:	4903      	ldr	r1, [pc, #12]	; (8000568 <Start_IVT_Sensor+0x4c>)
 800055a:	f240 4011 	movw	r0, #1041	; 0x411
 800055e:	f000 f875 	bl	800064c <Envio_CAN>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000a4 	.word	0x200000a4

0800056c <Stop_IVT_Sensor>:

void Stop_IVT_Sensor (void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

	Datos[0] = SET_MODE; Datos[1] = Stop; Datos[2]=Run;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	705a      	strb	r2, [r3, #1]
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 800057e:	2201      	movs	r2, #1
 8000580:	709a      	strb	r2, [r3, #2]
	Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	71da      	strb	r2, [r3, #7]
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 800058a:	79da      	ldrb	r2, [r3, #7]
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 800058e:	719a      	strb	r2, [r3, #6]
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 8000592:	799a      	ldrb	r2, [r3, #6]
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 8000596:	715a      	strb	r2, [r3, #5]
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 800059a:	795a      	ldrb	r2, [r3, #5]
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 800059e:	711a      	strb	r2, [r3, #4]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 80005a2:	791a      	ldrb	r2, [r3, #4]
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 80005a6:	70da      	strb	r2, [r3, #3]

	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 80005a8:	4903      	ldr	r1, [pc, #12]	; (80005b8 <Stop_IVT_Sensor+0x4c>)
 80005aa:	f240 4011 	movw	r0, #1041	; 0x411
 80005ae:	f000 f84d 	bl	800064c <Envio_CAN>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200000a4 	.word	0x200000a4

080005bc <Init_CAN>:
#include "Init_CAN.h"
#include "IVT_Sensor.h"

#define ID_CAN_DISPOSITIVO 0x100

void Init_CAN (void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  //Inicializado Recepciones
  RX_Header.IDE		= CAN_ID_STD;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <Init_CAN+0x80>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  RX_Header.StdId	= ID_CAN_DISPOSITIVO;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <Init_CAN+0x80>)
 80005c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005cc:	601a      	str	r2, [r3, #0]
  RX_Header.RTR		= CAN_RTR_DATA;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <Init_CAN+0x80>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  RX_Header.DLC		= 8;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <Init_CAN+0x80>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	611a      	str	r2, [r3, #16]

  //Inicializado Envios
  TX_Header.IDE 	= CAN_ID_STD;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <Init_CAN+0x84>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  TX_Header.StdId 	= ID_CAN_SENSOR_IVT;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <Init_CAN+0x84>)
 80005e2:	f240 4211 	movw	r2, #1041	; 0x411
 80005e6:	601a      	str	r2, [r3, #0]
  TX_Header.RTR 	= CAN_RTR_DATA;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <Init_CAN+0x84>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  TX_Header.DLC 	= 8;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <Init_CAN+0x84>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	611a      	str	r2, [r3, #16]

  //Inicializado Filtro
  sFilterConfig.FilterFIFOAssignment	= CAN_FILTER_FIFO0;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <Init_CAN+0x88>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh			= 0x245<<5;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <Init_CAN+0x88>)
 80005fc:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8000600:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow				= 0;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <Init_CAN+0x88>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh		= 0;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <Init_CAN+0x88>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow			= 0;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <Init_CAN+0x88>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale				= CAN_FILTERSCALE_32BIT;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <Init_CAN+0x88>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation		= ENABLE;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <Init_CAN+0x88>)
 800061c:	2201      	movs	r2, #1
 800061e:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <Init_CAN+0x88>)
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <Init_CAN+0x8c>)
 8000624:	f000 fb02 	bl	8000c2c <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000628:	2102      	movs	r1, #2
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <Init_CAN+0x8c>)
 800062c:	f000 fcfc 	bl	8001028 <HAL_CAN_ActivateNotification>

  //Inicializado Perifercio
  HAL_CAN_Start(&hcan1);
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <Init_CAN+0x8c>)
 8000632:	f000 fbdb 	bl	8000dec <HAL_CAN_Start>

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000e0 	.word	0x200000e0
 8000640:	20000028 	.word	0x20000028
 8000644:	20000040 	.word	0x20000040
 8000648:	200000b8 	.word	0x200000b8

0800064c <Envio_CAN>:

void Envio_CAN (uint32_t ID, uint8_t Datos_Envio[8]) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]

		TX_Header.StdId 	= ID;
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <Envio_CAN+0x24>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6013      	str	r3, [r2, #0]

	if (HAL_CAN_AddTxMessage(&hcan1, &TX_Header, Datos_Envio, &TxMailbox) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <Envio_CAN+0x28>)
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	4903      	ldr	r1, [pc, #12]	; (8000670 <Envio_CAN+0x24>)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <Envio_CAN+0x2c>)
 8000664:	f000 fc06 	bl	8000e74 <HAL_CAN_AddTxMessage>
	{
	   //JGD Generar Error
	}
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	200000ac 	.word	0x200000ac
 8000678:	200000b8 	.word	0x200000b8

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 f988 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f81c 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f892 	bl	80007b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800068c:	f000 f85a 	bl	8000744 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  Init_CAN();
 8000690:	f7ff ff94 	bl	80005bc <Init_CAN>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(envio ==1){
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <main+0x40>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d104      	bne.n	80006a6 <main+0x2a>
		  Start_IVT_Sensor();
 800069c:	f7ff ff3e 	bl	800051c <Start_IVT_Sensor>
		  envio=0;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <main+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	  }

	  if(envio ==2){
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <main+0x40>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d1f2      	bne.n	8000694 <main+0x18>
		  Stop_IVT_Sensor();
 80006ae:	f7ff ff5d 	bl	800056c <Stop_IVT_Sensor>
		  envio=0;
 80006b2:	4b02      	ldr	r3, [pc, #8]	; (80006bc <main+0x40>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	  if(envio ==1){
 80006b8:	e7ec      	b.n	8000694 <main+0x18>
 80006ba:	bf00      	nop
 80006bc:	20000104 	.word	0x20000104

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	; 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fc60 	bl	8001f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 ff4d 	bl	8001598 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x48>
  {
    Error_Handler();
 8000704:	f000 f88e 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fa4f 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800072c:	f000 f87a 	bl	8000824 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SystemClock_Config+0x80>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	42420070 	.word	0x42420070

08000744 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_CAN1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_CAN1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000750:	2205      	movs	r2, #5
 8000752:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_CAN1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000762:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000766:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_CAN1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_CAN1_Init+0x64>)
 8000794:	f000 f94e 	bl	8000a34 <HAL_CAN_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800079e:	f000 f841 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	40006400 	.word	0x40006400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0x70>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <MX_GPIO_Init+0x70>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_GPIO_Init+0x70>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_GPIO_Init+0x70>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_GPIO_Init+0x70>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0x70>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_GPIO_Init+0x70>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <MX_GPIO_Init+0x70>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_GPIO_Init+0x70>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_GPIO_Init+0x70>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <MX_GPIO_Init+0x70>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <MX_GPIO_Init+0x70>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x5c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x60>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_MspInit+0x60>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <HAL_CAN_MspInit+0x9c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d139      	bne.n	8000928 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_CAN_MspInit+0xa0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <HAL_CAN_MspInit+0xa4>)
 80008fa:	f000 fcc9 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_CAN_MspInit+0xa4>)
 8000914:	f000 fcbc 	bl	8001290 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2014      	movs	r0, #20
 800091e:	f000 fc80 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000922:	2014      	movs	r0, #20
 8000924:	f000 fc99 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40006400 	.word	0x40006400
 8000934:	40021000 	.word	0x40021000
 8000938:	40010800 	.word	0x40010800

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffe5 	bl	800093c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000972:	f001 faeb 	bl	8001f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fe81 	bl	800067c <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000984:	08001ffc 	.word	0x08001ffc
  ldr r2, =_sbss
 8000988:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800098c:	2000010c 	.word	0x2000010c

08000990 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 fc31 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff ff3e 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fc49 	bl	8001276 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 fc11 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000108 	.word	0x20000108

08000a34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e0ed      	b.n	8000c22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff1e 	bl	8000894 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0201 	orr.w	r2, r2, #1
 8000a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a68:	f7ff ffda 	bl	8000a20 <HAL_GetTick>
 8000a6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a6e:	e012      	b.n	8000a96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a70:	f7ff ffd6 	bl	8000a20 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b0a      	cmp	r3, #10
 8000a7c:	d90b      	bls.n	8000a96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e0c5      	b.n	8000c22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0e5      	beq.n	8000a70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0202 	bic.w	r2, r2, #2
 8000ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ab4:	f7ff ffb4 	bl	8000a20 <HAL_GetTick>
 8000ab8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aba:	e012      	b.n	8000ae2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000abc:	f7ff ffb0 	bl	8000a20 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d90b      	bls.n	8000ae2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2205      	movs	r2, #5
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e09f      	b.n	8000c22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1e5      	bne.n	8000abc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e1b      	ldrb	r3, [r3, #24]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7e5b      	ldrb	r3, [r3, #25]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7e9b      	ldrb	r3, [r3, #26]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d108      	bne.n	8000b5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0220 	orr.w	r2, r2, #32
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e007      	b.n	8000b6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0220 	bic.w	r2, r2, #32
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7edb      	ldrb	r3, [r3, #27]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d108      	bne.n	8000b88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0210 	bic.w	r2, r2, #16
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0210 	orr.w	r2, r2, #16
 8000b96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7f1b      	ldrb	r3, [r3, #28]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d108      	bne.n	8000bb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0208 	orr.w	r2, r2, #8
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e007      	b.n	8000bc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0208 	bic.w	r2, r2, #8
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7f5b      	ldrb	r3, [r3, #29]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d108      	bne.n	8000bdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f042 0204 	orr.w	r2, r2, #4
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e007      	b.n	8000bec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0204 	bic.w	r2, r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	ea42 0103 	orr.w	r1, r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	1e5a      	subs	r2, r3, #1
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c44:	7cfb      	ldrb	r3, [r7, #19]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d003      	beq.n	8000c52 <HAL_CAN_ConfigFilter+0x26>
 8000c4a:	7cfb      	ldrb	r3, [r7, #19]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	f040 80be 	bne.w	8000dce <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c52:	4b65      	ldr	r3, [pc, #404]	; (8000de8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000c54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c5c:	f043 0201 	orr.w	r2, r3, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	431a      	orrs	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	2201      	movs	r2, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d123      	bne.n	8000cfc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3248      	adds	r2, #72	; 0x48
 8000cdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf2:	6979      	ldr	r1, [r7, #20]
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d122      	bne.n	8000d4a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3248      	adds	r2, #72	; 0x48
 8000d2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d40:	6979      	ldr	r1, [r7, #20]
 8000d42:	3348      	adds	r3, #72	; 0x48
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	440b      	add	r3, r1
 8000d48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d64:	e007      	b.n	8000d76 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d90:	e007      	b.n	8000da2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d107      	bne.n	8000dba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dc0:	f023 0201 	bic.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e006      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
  }
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40006400 	.word	0x40006400

08000dec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d12e      	bne.n	8000e5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e18:	f7ff fe02 	bl	8000a20 <HAL_GetTick>
 8000e1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e1e:	e012      	b.n	8000e46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e20:	f7ff fdfe 	bl	8000a20 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b0a      	cmp	r3, #10
 8000e2c:	d90b      	bls.n	8000e46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e012      	b.n	8000e6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1e5      	bne.n	8000e20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e006      	b.n	8000e6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
  }
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e92:	7ffb      	ldrb	r3, [r7, #31]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <HAL_CAN_AddTxMessage+0x2c>
 8000e98:	7ffb      	ldrb	r3, [r7, #31]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	f040 80b8 	bne.w	8001010 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 80a0 	beq.w	8001000 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	0e1b      	lsrs	r3, r3, #24
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d907      	bls.n	8000ee0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e09e      	b.n	800101e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10d      	bne.n	8000f0e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3318      	adds	r3, #24
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	440b      	add	r3, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e00f      	b.n	8000f2e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3318      	adds	r3, #24
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	440b      	add	r3, r1
 8000f2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3318      	adds	r3, #24
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3304      	adds	r3, #4
 8000f40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	7d1b      	ldrb	r3, [r3, #20]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d111      	bne.n	8000f6e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3318      	adds	r3, #24
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	4413      	add	r3, r2
 8000f56:	3304      	adds	r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3318      	adds	r3, #24
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	440b      	add	r3, r1
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3307      	adds	r3, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	061a      	lsls	r2, r3, #24
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3306      	adds	r3, #6
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3305      	adds	r3, #5
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	3204      	adds	r2, #4
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	4610      	mov	r0, r2
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	6811      	ldr	r1, [r2, #0]
 8000f96:	ea43 0200 	orr.w	r2, r3, r0
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fa4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	061a      	lsls	r2, r3, #24
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	6811      	ldr	r1, [r2, #0]
 8000fcc:	ea43 0200 	orr.w	r2, r3, r0
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	3318      	adds	r3, #24
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6811      	ldr	r1, [r2, #0]
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e00e      	b.n	800101e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e006      	b.n	800101e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
  }
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d002      	beq.n	8001046 <HAL_CAN_ActivateNotification+0x1e>
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d109      	bne.n	800105a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6959      	ldr	r1, [r3, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e006      	b.n	8001068 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
  }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
	...

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4906      	ldr	r1, [pc, #24]	; (800110c <__NVIC_EnableIRQ+0x34>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff90 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff2d 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff42 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff90 	bl	8001164 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5f 	bl	8001110 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff35 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b08b      	sub	sp, #44	; 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e169      	b.n	8001578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a4:	2201      	movs	r2, #1
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8158 	bne.w	8001572 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a9a      	ldr	r2, [pc, #616]	; (8001530 <HAL_GPIO_Init+0x2a0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d05e      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012cc:	4a98      	ldr	r2, [pc, #608]	; (8001530 <HAL_GPIO_Init+0x2a0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d875      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012d2:	4a98      	ldr	r2, [pc, #608]	; (8001534 <HAL_GPIO_Init+0x2a4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d058      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012d8:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_GPIO_Init+0x2a4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d86f      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012de:	4a96      	ldr	r2, [pc, #600]	; (8001538 <HAL_GPIO_Init+0x2a8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d052      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012e4:	4a94      	ldr	r2, [pc, #592]	; (8001538 <HAL_GPIO_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d869      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012ea:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_GPIO_Init+0x2ac>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d04c      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012f0:	4a92      	ldr	r2, [pc, #584]	; (800153c <HAL_GPIO_Init+0x2ac>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d863      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012f6:	4a92      	ldr	r2, [pc, #584]	; (8001540 <HAL_GPIO_Init+0x2b0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d046      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012fc:	4a90      	ldr	r2, [pc, #576]	; (8001540 <HAL_GPIO_Init+0x2b0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d85d      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d82a      	bhi.n	800135c <HAL_GPIO_Init+0xcc>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d859      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <HAL_GPIO_Init+0x80>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800138b 	.word	0x0800138b
 8001314:	08001365 	.word	0x08001365
 8001318:	08001377 	.word	0x08001377
 800131c:	080013b9 	.word	0x080013b9
 8001320:	080013bf 	.word	0x080013bf
 8001324:	080013bf 	.word	0x080013bf
 8001328:	080013bf 	.word	0x080013bf
 800132c:	080013bf 	.word	0x080013bf
 8001330:	080013bf 	.word	0x080013bf
 8001334:	080013bf 	.word	0x080013bf
 8001338:	080013bf 	.word	0x080013bf
 800133c:	080013bf 	.word	0x080013bf
 8001340:	080013bf 	.word	0x080013bf
 8001344:	080013bf 	.word	0x080013bf
 8001348:	080013bf 	.word	0x080013bf
 800134c:	080013bf 	.word	0x080013bf
 8001350:	080013bf 	.word	0x080013bf
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001381 	.word	0x08001381
 800135c:	4a79      	ldr	r2, [pc, #484]	; (8001544 <HAL_GPIO_Init+0x2b4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e029      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e024      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01f      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e01a      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e013      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e009      	b.n	80013c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e003      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          break;
 80013be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2bff      	cmp	r3, #255	; 0xff
 80013c4:	d801      	bhi.n	80013ca <HAL_GPIO_Init+0x13a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_Init+0x13e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d802      	bhi.n	80013dc <HAL_GPIO_Init+0x14c>
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	e002      	b.n	80013e2 <HAL_GPIO_Init+0x152>
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	3b08      	subs	r3, #8
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	210f      	movs	r1, #15
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	6a39      	ldr	r1, [r7, #32]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80b1 	beq.w	8001572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001410:	4b4d      	ldr	r3, [pc, #308]	; (8001548 <HAL_GPIO_Init+0x2b8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a4c      	ldr	r2, [pc, #304]	; (8001548 <HAL_GPIO_Init+0x2b8>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_GPIO_Init+0x2b8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001428:	4a48      	ldr	r2, [pc, #288]	; (800154c <HAL_GPIO_Init+0x2bc>)
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a40      	ldr	r2, [pc, #256]	; (8001550 <HAL_GPIO_Init+0x2c0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x1ec>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <HAL_GPIO_Init+0x2c4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1e8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3e      	ldr	r2, [pc, #248]	; (8001558 <HAL_GPIO_Init+0x2c8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1e4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3d      	ldr	r2, [pc, #244]	; (800155c <HAL_GPIO_Init+0x2cc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1e0>
 800146c:	2303      	movs	r3, #3
 800146e:	e006      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001470:	2304      	movs	r3, #4
 8001472:	e004      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001474:	2302      	movs	r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <HAL_GPIO_Init+0x1ee>
 800147c:	2300      	movs	r3, #0
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	f002 0203 	and.w	r2, r2, #3
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	4093      	lsls	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148e:	492f      	ldr	r1, [pc, #188]	; (800154c <HAL_GPIO_Init+0x2bc>)
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	492c      	ldr	r1, [pc, #176]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	4928      	ldr	r1, [pc, #160]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4922      	ldr	r1, [pc, #136]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	491e      	ldr	r1, [pc, #120]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4918      	ldr	r1, [pc, #96]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	4914      	ldr	r1, [pc, #80]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d021      	beq.n	8001564 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
 800152c:	e021      	b.n	8001572 <HAL_GPIO_Init+0x2e2>
 800152e:	bf00      	nop
 8001530:	10320000 	.word	0x10320000
 8001534:	10310000 	.word	0x10310000
 8001538:	10220000 	.word	0x10220000
 800153c:	10210000 	.word	0x10210000
 8001540:	10120000 	.word	0x10120000
 8001544:	10110000 	.word	0x10110000
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40011000 	.word	0x40011000
 800155c:	40011400 	.word	0x40011400
 8001560:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	43db      	mvns	r3, r3
 800156c:	4909      	ldr	r1, [pc, #36]	; (8001594 <HAL_GPIO_Init+0x304>)
 800156e:	4013      	ands	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f ae8e 	bne.w	80012a4 <HAL_GPIO_Init+0x14>
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	372c      	adds	r7, #44	; 0x2c
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e304      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e2de      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f9d4 	bl	8000a20 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff f9d0 	bl	8000a20 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e292      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f9c0 	bl	8000a20 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff f9bc 	bl	8000a20 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e27e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e252      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f975 	bl	8000a20 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff f971 	bl	8000a20 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e233      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f954 	bl	8000a20 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff f950 	bl	8000a20 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e212      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f934 	bl	8000a20 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff f930 	bl	8000a20 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1f2      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fb98 	bl	8001f10 <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f91a 	bl	8000a20 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff f916 	bl	8000a20 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1d8      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b9b      	ldr	r3, [pc, #620]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b91      	ldr	r3, [pc, #580]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a90      	ldr	r2, [pc, #576]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b8b      	ldr	r3, [pc, #556]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a87      	ldr	r2, [pc, #540]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff f8d7 	bl	8000a20 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff f8d3 	bl	8000a20 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e195      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x4ec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b78      	ldr	r3, [pc, #480]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a72      	ldr	r2, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a6f      	ldr	r2, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a60      	ldr	r2, [pc, #384]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f887 	bl	8000a20 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f883 	bl	8000a20 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e143      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f871 	bl	8000a20 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f86d 	bl	8000a20 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e12d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 808c 	beq.w	8001a98 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d10e      	bne.n	80019ac <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001996:	2b08      	cmp	r3, #8
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800199a:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e103      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d14e      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0ef      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_RCC_OscConfig+0x4f0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f821 	bl	8000a20 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80019e2:	f7ff f81d 	bl	8000a20 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0df      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	491c      	ldr	r1, [pc, #112]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4918      	ldr	r1, [pc, #96]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCC_OscConfig+0x4f0>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7fe fff9 	bl	8000a20 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001a32:	f7fe fff5 	bl	8000a20 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0b7      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x49a>
 8001a50:	e022      	b.n	8001a98 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_RCC_OscConfig+0x4e8>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x4f0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe ffdc 	bl	8000a20 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001a6c:	f7fe ffd8 	bl	8000a20 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d908      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e09a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e9      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8088 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d068      	beq.n	8001b80 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d14d      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x628>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe ffb0 	bl	8000a20 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7fe ffac 	bl	8000a20 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e06e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d10f      	bne.n	8001b0c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4931      	ldr	r1, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	492d      	ldr	r1, [pc, #180]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x628>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ff79 	bl	8000a20 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe ff75 	bl	8000a20 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e037      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x59a>
 8001b50:	e02f      	b.n	8001bb2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x628>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe ff62 	bl	8000a20 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe ff5e 	bl	8000a20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c8>
 8001b7e:	e018      	b.n	8001bb2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e013      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x624>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	42420060 	.word	0x42420060

08001bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0d0      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d910      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4965      	ldr	r1, [pc, #404]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b8      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	494d      	ldr	r1, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d040      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d115      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e073      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06b      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 0203 	bic.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4936      	ldr	r1, [pc, #216]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe feb4 	bl	8000a20 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7fe feb0 	bl	8000a20 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e053      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 020c 	and.w	r2, r3, #12
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1eb      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d210      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4922      	ldr	r1, [pc, #136]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d52:	f000 f821 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	490a      	ldr	r1, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1cc>)
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fe24 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08001fdc 	.word	0x08001fdc
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	b091      	sub	sp, #68	; 0x44
 8001d9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001d9e:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da0:	f107 0414 	add.w	r4, r7, #20
 8001da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da6:	c407      	stmia	r4!, {r0, r1, r2}
 8001da8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_RCC_GetSysClockFreq+0x164>)
 8001dac:	1d3c      	adds	r4, r7, #4
 8001dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d002      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d003      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x54>
 8001de4:	e080      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dea:	e080      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001df8:	4413      	add	r3, r2
 8001dfa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d066      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e16:	4413      	add	r3, r2
 8001e18:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d044      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	3301      	adds	r3, #1
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3302      	adds	r3, #2
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	461a      	mov	r2, r3
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	fb02 f501 	mul.w	r5, r2, r1
 8001e5a:	fb00 f403 	mul.w	r4, r0, r3
 8001e5e:	442c      	add	r4, r5
 8001e60:	fba0 2302 	umull	r2, r3, r0, r2
 8001e64:	18e1      	adds	r1, r4, r3
 8001e66:	460b      	mov	r3, r1
 8001e68:	4926      	ldr	r1, [pc, #152]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e6a:	fb01 f003 	mul.w	r0, r1, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	fb01 f102 	mul.w	r1, r1, r2
 8001e74:	4401      	add	r1, r0
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e78:	fba2 4500 	umull	r4, r5, r2, r0
 8001e7c:	194b      	adds	r3, r1, r5
 8001e7e:	461d      	mov	r5, r3
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	4618      	mov	r0, r3
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	fb02 fc01 	mul.w	ip, r2, r1
 8001e94:	fb00 f603 	mul.w	r6, r0, r3
 8001e98:	4466      	add	r6, ip
 8001e9a:	fba0 2302 	umull	r2, r3, r0, r2
 8001e9e:	18f1      	adds	r1, r6, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe f9bd 	bl	8000224 <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4613      	mov	r3, r2
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb2:	e007      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001eb8:	fb02 f203 	mul.w	r2, r2, r3
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001ec4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed6:	e004      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x170>)
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x174>)
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3744      	adds	r7, #68	; 0x44
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef8:	08001fbc 	.word	0x08001fbc
 8001efc:	08001fcc 	.word	0x08001fcc
 8001f00:	40021000 	.word	0x40021000
 8001f04:	017d7840 	.word	0x017d7840
 8001f08:	003d0900 	.word	0x003d0900
 8001f0c:	007a1200 	.word	0x007a1200

08001f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <RCC_Delay+0x34>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <RCC_Delay+0x38>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f2c:	bf00      	nop
  }
  while (Delay --);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <RCC_Delay+0x1c>
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000000 	.word	0x20000000
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <__libc_init_array>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	2600      	movs	r6, #0
 8001f50:	4d0c      	ldr	r5, [pc, #48]	; (8001f84 <__libc_init_array+0x38>)
 8001f52:	4c0d      	ldr	r4, [pc, #52]	; (8001f88 <__libc_init_array+0x3c>)
 8001f54:	1b64      	subs	r4, r4, r5
 8001f56:	10a4      	asrs	r4, r4, #2
 8001f58:	42a6      	cmp	r6, r4
 8001f5a:	d109      	bne.n	8001f70 <__libc_init_array+0x24>
 8001f5c:	f000 f822 	bl	8001fa4 <_init>
 8001f60:	2600      	movs	r6, #0
 8001f62:	4d0a      	ldr	r5, [pc, #40]	; (8001f8c <__libc_init_array+0x40>)
 8001f64:	4c0a      	ldr	r4, [pc, #40]	; (8001f90 <__libc_init_array+0x44>)
 8001f66:	1b64      	subs	r4, r4, r5
 8001f68:	10a4      	asrs	r4, r4, #2
 8001f6a:	42a6      	cmp	r6, r4
 8001f6c:	d105      	bne.n	8001f7a <__libc_init_array+0x2e>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f74:	4798      	blx	r3
 8001f76:	3601      	adds	r6, #1
 8001f78:	e7ee      	b.n	8001f58 <__libc_init_array+0xc>
 8001f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7e:	4798      	blx	r3
 8001f80:	3601      	adds	r6, #1
 8001f82:	e7f2      	b.n	8001f6a <__libc_init_array+0x1e>
 8001f84:	08001ff4 	.word	0x08001ff4
 8001f88:	08001ff4 	.word	0x08001ff4
 8001f8c:	08001ff4 	.word	0x08001ff4
 8001f90:	08001ff8 	.word	0x08001ff8

08001f94 <memset>:
 8001f94:	4603      	mov	r3, r0
 8001f96:	4402      	add	r2, r0
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <memset+0xa>
 8001f9c:	4770      	bx	lr
 8001f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa2:	e7f9      	b.n	8001f98 <memset+0x4>

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
