
FW_IVT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800328c  0800328c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003294  08003294  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800329c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080032a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080032a8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007188  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a7  00000000  00000000  000271bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00028968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00028f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8c7  00000000  00000000  00029400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000709f  00000000  00000000  00046cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaaa1  00000000  00000000  0004dd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8807  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e4  00000000  00000000  000f885c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08003244 	.word	0x08003244

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08003244 	.word	0x08003244

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b96e 	b.w	8000b88 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9e08      	ldr	r6, [sp, #32]
 80008ca:	460d      	mov	r5, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	468e      	mov	lr, r1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f040 8083 	bne.w	80009dc <__udivmoddi4+0x118>
 80008d6:	428a      	cmp	r2, r1
 80008d8:	4617      	mov	r7, r2
 80008da:	d947      	bls.n	800096c <__udivmoddi4+0xa8>
 80008dc:	fab2 f382 	clz	r3, r2
 80008e0:	b14b      	cbz	r3, 80008f6 <__udivmoddi4+0x32>
 80008e2:	f1c3 0120 	rsb	r1, r3, #32
 80008e6:	fa05 fe03 	lsl.w	lr, r5, r3
 80008ea:	fa20 f101 	lsr.w	r1, r0, r1
 80008ee:	409f      	lsls	r7, r3
 80008f0:	ea41 0e0e 	orr.w	lr, r1, lr
 80008f4:	409c      	lsls	r4, r3
 80008f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fa:	fbbe fcf8 	udiv	ip, lr, r8
 80008fe:	fa1f f987 	uxth.w	r9, r7
 8000902:	fb08 e21c 	mls	r2, r8, ip, lr
 8000906:	fb0c f009 	mul.w	r0, ip, r9
 800090a:	0c21      	lsrs	r1, r4, #16
 800090c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000910:	4290      	cmp	r0, r2
 8000912:	d90a      	bls.n	800092a <__udivmoddi4+0x66>
 8000914:	18ba      	adds	r2, r7, r2
 8000916:	f10c 31ff 	add.w	r1, ip, #4294967295
 800091a:	f080 8118 	bcs.w	8000b4e <__udivmoddi4+0x28a>
 800091e:	4290      	cmp	r0, r2
 8000920:	f240 8115 	bls.w	8000b4e <__udivmoddi4+0x28a>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	443a      	add	r2, r7
 800092a:	1a12      	subs	r2, r2, r0
 800092c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000930:	fb08 2210 	mls	r2, r8, r0, r2
 8000934:	fb00 f109 	mul.w	r1, r0, r9
 8000938:	b2a4      	uxth	r4, r4
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	42a1      	cmp	r1, r4
 8000940:	d909      	bls.n	8000956 <__udivmoddi4+0x92>
 8000942:	193c      	adds	r4, r7, r4
 8000944:	f100 32ff 	add.w	r2, r0, #4294967295
 8000948:	f080 8103 	bcs.w	8000b52 <__udivmoddi4+0x28e>
 800094c:	42a1      	cmp	r1, r4
 800094e:	f240 8100 	bls.w	8000b52 <__udivmoddi4+0x28e>
 8000952:	3802      	subs	r0, #2
 8000954:	443c      	add	r4, r7
 8000956:	1a64      	subs	r4, r4, r1
 8000958:	2100      	movs	r1, #0
 800095a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095e:	b11e      	cbz	r6, 8000968 <__udivmoddi4+0xa4>
 8000960:	2200      	movs	r2, #0
 8000962:	40dc      	lsrs	r4, r3
 8000964:	e9c6 4200 	strd	r4, r2, [r6]
 8000968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xac>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f382 	clz	r3, r2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d14f      	bne.n	8000a18 <__udivmoddi4+0x154>
 8000978:	1a8d      	subs	r5, r1, r2
 800097a:	2101      	movs	r1, #1
 800097c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000980:	fa1f f882 	uxth.w	r8, r2
 8000984:	fbb5 fcfe 	udiv	ip, r5, lr
 8000988:	fb0e 551c 	mls	r5, lr, ip, r5
 800098c:	fb08 f00c 	mul.w	r0, r8, ip
 8000990:	0c22      	lsrs	r2, r4, #16
 8000992:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000996:	42a8      	cmp	r0, r5
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0xe6>
 800099a:	197d      	adds	r5, r7, r5
 800099c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80009a0:	d202      	bcs.n	80009a8 <__udivmoddi4+0xe4>
 80009a2:	42a8      	cmp	r0, r5
 80009a4:	f200 80e9 	bhi.w	8000b7a <__udivmoddi4+0x2b6>
 80009a8:	4694      	mov	ip, r2
 80009aa:	1a2d      	subs	r5, r5, r0
 80009ac:	fbb5 f0fe 	udiv	r0, r5, lr
 80009b0:	fb0e 5510 	mls	r5, lr, r0, r5
 80009b4:	fb08 f800 	mul.w	r8, r8, r0
 80009b8:	b2a4      	uxth	r4, r4
 80009ba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009be:	45a0      	cmp	r8, r4
 80009c0:	d907      	bls.n	80009d2 <__udivmoddi4+0x10e>
 80009c2:	193c      	adds	r4, r7, r4
 80009c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009c8:	d202      	bcs.n	80009d0 <__udivmoddi4+0x10c>
 80009ca:	45a0      	cmp	r8, r4
 80009cc:	f200 80d9 	bhi.w	8000b82 <__udivmoddi4+0x2be>
 80009d0:	4610      	mov	r0, r2
 80009d2:	eba4 0408 	sub.w	r4, r4, r8
 80009d6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009da:	e7c0      	b.n	800095e <__udivmoddi4+0x9a>
 80009dc:	428b      	cmp	r3, r1
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x12e>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	f000 80b1 	beq.w	8000b48 <__udivmoddi4+0x284>
 80009e6:	2100      	movs	r1, #0
 80009e8:	e9c6 0500 	strd	r0, r5, [r6]
 80009ec:	4608      	mov	r0, r1
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	fab3 f183 	clz	r1, r3
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d14b      	bne.n	8000a92 <__udivmoddi4+0x1ce>
 80009fa:	42ab      	cmp	r3, r5
 80009fc:	d302      	bcc.n	8000a04 <__udivmoddi4+0x140>
 80009fe:	4282      	cmp	r2, r0
 8000a00:	f200 80b9 	bhi.w	8000b76 <__udivmoddi4+0x2b2>
 8000a04:	1a84      	subs	r4, r0, r2
 8000a06:	eb65 0303 	sbc.w	r3, r5, r3
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	469e      	mov	lr, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0aa      	beq.n	8000968 <__udivmoddi4+0xa4>
 8000a12:	e9c6 4e00 	strd	r4, lr, [r6]
 8000a16:	e7a7      	b.n	8000968 <__udivmoddi4+0xa4>
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	f1c3 0220 	rsb	r2, r3, #32
 8000a1e:	40d1      	lsrs	r1, r2
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a28:	fa1f f887 	uxth.w	r8, r7
 8000a2c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a30:	fa24 f202 	lsr.w	r2, r4, r2
 8000a34:	409d      	lsls	r5, r3
 8000a36:	fb00 fc08 	mul.w	ip, r0, r8
 8000a3a:	432a      	orrs	r2, r5
 8000a3c:	0c15      	lsrs	r5, r2, #16
 8000a3e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000a42:	45ac      	cmp	ip, r5
 8000a44:	fa04 f403 	lsl.w	r4, r4, r3
 8000a48:	d909      	bls.n	8000a5e <__udivmoddi4+0x19a>
 8000a4a:	197d      	adds	r5, r7, r5
 8000a4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a50:	f080 808f 	bcs.w	8000b72 <__udivmoddi4+0x2ae>
 8000a54:	45ac      	cmp	ip, r5
 8000a56:	f240 808c 	bls.w	8000b72 <__udivmoddi4+0x2ae>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	443d      	add	r5, r7
 8000a5e:	eba5 050c 	sub.w	r5, r5, ip
 8000a62:	fbb5 f1fe 	udiv	r1, r5, lr
 8000a66:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000a6a:	fb01 f908 	mul.w	r9, r1, r8
 8000a6e:	b295      	uxth	r5, r2
 8000a70:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a74:	45a9      	cmp	r9, r5
 8000a76:	d907      	bls.n	8000a88 <__udivmoddi4+0x1c4>
 8000a78:	197d      	adds	r5, r7, r5
 8000a7a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000a7e:	d274      	bcs.n	8000b6a <__udivmoddi4+0x2a6>
 8000a80:	45a9      	cmp	r9, r5
 8000a82:	d972      	bls.n	8000b6a <__udivmoddi4+0x2a6>
 8000a84:	3902      	subs	r1, #2
 8000a86:	443d      	add	r5, r7
 8000a88:	eba5 0509 	sub.w	r5, r5, r9
 8000a8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a90:	e778      	b.n	8000984 <__udivmoddi4+0xc0>
 8000a92:	f1c1 0720 	rsb	r7, r1, #32
 8000a96:	408b      	lsls	r3, r1
 8000a98:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa0:	fa25 f407 	lsr.w	r4, r5, r7
 8000aa4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa8:	fbb4 f9fe 	udiv	r9, r4, lr
 8000aac:	fa1f f88c 	uxth.w	r8, ip
 8000ab0:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ab4:	fa20 f307 	lsr.w	r3, r0, r7
 8000ab8:	fb09 fa08 	mul.w	sl, r9, r8
 8000abc:	408d      	lsls	r5, r1
 8000abe:	431d      	orrs	r5, r3
 8000ac0:	0c2b      	lsrs	r3, r5, #16
 8000ac2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ac6:	45a2      	cmp	sl, r4
 8000ac8:	fa02 f201 	lsl.w	r2, r2, r1
 8000acc:	fa00 f301 	lsl.w	r3, r0, r1
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x222>
 8000ad2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ada:	d248      	bcs.n	8000b6e <__udivmoddi4+0x2aa>
 8000adc:	45a2      	cmp	sl, r4
 8000ade:	d946      	bls.n	8000b6e <__udivmoddi4+0x2aa>
 8000ae0:	f1a9 0902 	sub.w	r9, r9, #2
 8000ae4:	4464      	add	r4, ip
 8000ae6:	eba4 040a 	sub.w	r4, r4, sl
 8000aea:	fbb4 f0fe 	udiv	r0, r4, lr
 8000aee:	fb0e 4410 	mls	r4, lr, r0, r4
 8000af2:	fb00 fa08 	mul.w	sl, r0, r8
 8000af6:	b2ad      	uxth	r5, r5
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	45a2      	cmp	sl, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x24e>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b08:	d22d      	bcs.n	8000b66 <__udivmoddi4+0x2a2>
 8000b0a:	45a2      	cmp	sl, r4
 8000b0c:	d92b      	bls.n	8000b66 <__udivmoddi4+0x2a2>
 8000b0e:	3802      	subs	r0, #2
 8000b10:	4464      	add	r4, ip
 8000b12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b16:	fba0 8902 	umull	r8, r9, r0, r2
 8000b1a:	eba4 040a 	sub.w	r4, r4, sl
 8000b1e:	454c      	cmp	r4, r9
 8000b20:	46c6      	mov	lr, r8
 8000b22:	464d      	mov	r5, r9
 8000b24:	d319      	bcc.n	8000b5a <__udivmoddi4+0x296>
 8000b26:	d016      	beq.n	8000b56 <__udivmoddi4+0x292>
 8000b28:	b15e      	cbz	r6, 8000b42 <__udivmoddi4+0x27e>
 8000b2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000b2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000b32:	fa04 f707 	lsl.w	r7, r4, r7
 8000b36:	fa22 f301 	lsr.w	r3, r2, r1
 8000b3a:	431f      	orrs	r7, r3
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	e9c6 7400 	strd	r7, r4, [r6]
 8000b42:	2100      	movs	r1, #0
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	4631      	mov	r1, r6
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e70c      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b4e:	468c      	mov	ip, r1
 8000b50:	e6eb      	b.n	800092a <__udivmoddi4+0x66>
 8000b52:	4610      	mov	r0, r2
 8000b54:	e6ff      	b.n	8000956 <__udivmoddi4+0x92>
 8000b56:	4543      	cmp	r3, r8
 8000b58:	d2e6      	bcs.n	8000b28 <__udivmoddi4+0x264>
 8000b5a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b5e:	eb69 050c 	sbc.w	r5, r9, ip
 8000b62:	3801      	subs	r0, #1
 8000b64:	e7e0      	b.n	8000b28 <__udivmoddi4+0x264>
 8000b66:	4628      	mov	r0, r5
 8000b68:	e7d3      	b.n	8000b12 <__udivmoddi4+0x24e>
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	e78c      	b.n	8000a88 <__udivmoddi4+0x1c4>
 8000b6e:	4681      	mov	r9, r0
 8000b70:	e7b9      	b.n	8000ae6 <__udivmoddi4+0x222>
 8000b72:	4608      	mov	r0, r1
 8000b74:	e773      	b.n	8000a5e <__udivmoddi4+0x19a>
 8000b76:	4608      	mov	r0, r1
 8000b78:	e749      	b.n	8000a0e <__udivmoddi4+0x14a>
 8000b7a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b7e:	443d      	add	r5, r7
 8000b80:	e713      	b.n	80009aa <__udivmoddi4+0xe6>
 8000b82:	3802      	subs	r0, #2
 8000b84:	443c      	add	r4, r7
 8000b86:	e724      	b.n	80009d2 <__udivmoddi4+0x10e>

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	0000      	movs	r0, r0
	...

08000b90 <Gestion_Datos_Sensor_IVT>:
  * @brief  Gestión de los datos recibidos por bus CAN, provenientes del sensor IVT.
  * 		Recepciona mensaje y lo guarda en la variable correspodiente en la estructura Datos_Sensor.
  * @param  id_CAN_RX: id CAN del mensaje recibido.
  * @retval None
  */
void Gestion_Datos_Sensor_IVT (uint32_t id_CAN_RX){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	int32_t aux=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f2a3 5311 	subw	r3, r3, #1297	; 0x511
 8000ba2:	2b14      	cmp	r3, #20
 8000ba4:	f200 80f6 	bhi.w	8000d94 <Gestion_Datos_Sensor_IVT+0x204>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <Gestion_Datos_Sensor_IVT+0x20>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000c05 	.word	0x08000c05
 8000bb4:	08000d95 	.word	0x08000d95
 8000bb8:	08000d95 	.word	0x08000d95
 8000bbc:	08000d95 	.word	0x08000d95
 8000bc0:	08000d95 	.word	0x08000d95
 8000bc4:	08000d95 	.word	0x08000d95
 8000bc8:	08000d95 	.word	0x08000d95
 8000bcc:	08000d95 	.word	0x08000d95
 8000bd0:	08000d95 	.word	0x08000d95
 8000bd4:	08000d95 	.word	0x08000d95
 8000bd8:	08000d95 	.word	0x08000d95
 8000bdc:	08000d95 	.word	0x08000d95
 8000be0:	08000d95 	.word	0x08000d95
 8000be4:	08000d95 	.word	0x08000d95
 8000be8:	08000d95 	.word	0x08000d95
 8000bec:	08000d95 	.word	0x08000d95
 8000bf0:	08000c49 	.word	0x08000c49
 8000bf4:	08000c8b 	.word	0x08000c8b
 8000bf8:	08000ccd 	.word	0x08000ccd
 8000bfc:	08000d0f 	.word	0x08000d0f
 8000c00:	08000d51 	.word	0x08000d51
	  switch (id_CAN_RX){

		  case id_Msg_Response:

			  /*!< Respuesta a Get Serial Number       */
			  if(RX_CAN_DATA[0] == 0xBB){
 8000c04:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2bbb      	cmp	r3, #187	; 0xbb
 8000c0a:	d112      	bne.n	8000c32 <Gestion_Datos_Sensor_IVT+0xa2>
			  	  aux = (RX_CAN_DATA[1]<<24)+(RX_CAN_DATA[2]<<16)+(RX_CAN_DATA[3]<<8)+(RX_CAN_DATA[4]);
 8000c0c:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	061a      	lsls	r2, r3, #24
 8000c12:	4b67      	ldr	r3, [pc, #412]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	441a      	add	r2, r3
 8000c1a:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c1c:	78db      	ldrb	r3, [r3, #3]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	4413      	add	r3, r2
 8000c22:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c24:	7912      	ldrb	r2, [r2, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
		    	  Sensor_IVT.Numero_Serie = aux;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000c2e:	6013      	str	r3, [r2, #0]
				  break;
 8000c30:	e0b0      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>
			  }
			  /*!< Respuesta a Get_Measurement_Errors  */
			  if(RX_CAN_DATA[0] == 0x80){
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b80      	cmp	r3, #128	; 0x80
 8000c38:	f040 80ab 	bne.w	8000d92 <Gestion_Datos_Sensor_IVT+0x202>
				  //JGD SEGUIR DESARROLLAR FUNCION

				  Sensor_IVT.Alarmas.Total_Errores = RX_CAN_DATA[2];
 8000c3c:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000c44:	61da      	str	r2, [r3, #28]
				  break;
 8000c46:	e0a5      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>
			  }
			break;

	      case id_Msg_Result_I:
	    	  aux = (RX_CAN_DATA[2]<<24)+(RX_CAN_DATA[3]<<16)+(RX_CAN_DATA[4]<<8)+(RX_CAN_DATA[5]);
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	061a      	lsls	r2, r3, #24
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	441a      	add	r2, r3
 8000c56:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c58:	791b      	ldrb	r3, [r3, #4]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c60:	7952      	ldrb	r2, [r2, #5]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
	    	  Sensor_IVT.Datos.Corriente = aux * CONV_MIL;
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fd5a 	bl	8000720 <__aeabi_i2d>
 8000c6c:	a34c      	add	r3, pc, #304	; (adr r3, 8000da0 <Gestion_Datos_Sensor_IVT+0x210>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fad9 	bl	8000228 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fdb9 	bl	80007f4 <__aeabi_d2f>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a4b      	ldr	r2, [pc, #300]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000c86:	6053      	str	r3, [r2, #4]
	        break;
 8000c88:	e084      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>

	      case id_Msg_Result_U1:
	    	  aux = (RX_CAN_DATA[2]<<24)+(RX_CAN_DATA[3]<<16)+(RX_CAN_DATA[4]<<8)+(RX_CAN_DATA[5]);
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	061a      	lsls	r2, r3, #24
 8000c90:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c92:	78db      	ldrb	r3, [r3, #3]
 8000c94:	041b      	lsls	r3, r3, #16
 8000c96:	441a      	add	r2, r3
 8000c98:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000ca2:	7952      	ldrb	r2, [r2, #5]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
	    	  Sensor_IVT.Datos.Tension_1 = aux * CONV_MIL;
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fd39 	bl	8000720 <__aeabi_i2d>
 8000cae:	a33c      	add	r3, pc, #240	; (adr r3, 8000da0 <Gestion_Datos_Sensor_IVT+0x210>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f7ff fab8 	bl	8000228 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f7ff fd98 	bl	80007f4 <__aeabi_d2f>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000cc8:	6093      	str	r3, [r2, #8]
	        break;
 8000cca:	e063      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>

	      case id_Msg_Result_U2:
	    	  aux = (RX_CAN_DATA[2]<<24)+(RX_CAN_DATA[3]<<16)+(RX_CAN_DATA[4]<<8)+(RX_CAN_DATA[5]);
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	061a      	lsls	r2, r3, #24
 8000cd2:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	441a      	add	r2, r3
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000cdc:	791b      	ldrb	r3, [r3, #4]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000ce4:	7952      	ldrb	r2, [r2, #5]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
	    	  Sensor_IVT.Datos.Tension_2 = aux * CONV_MIL;
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fd18 	bl	8000720 <__aeabi_i2d>
 8000cf0:	a32b      	add	r3, pc, #172	; (adr r3, 8000da0 <Gestion_Datos_Sensor_IVT+0x210>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fa97 	bl	8000228 <__aeabi_dmul>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fd77 	bl	80007f4 <__aeabi_d2f>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000d0a:	60d3      	str	r3, [r2, #12]
	        break;
 8000d0c:	e042      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>

	      case id_Msg_Result_U3:
	    	  aux = (RX_CAN_DATA[2]<<24)+(RX_CAN_DATA[3]<<16)+(RX_CAN_DATA[4]<<8)+(RX_CAN_DATA[5]);
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	061a      	lsls	r2, r3, #24
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d16:	78db      	ldrb	r3, [r3, #3]
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	441a      	add	r2, r3
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	4413      	add	r3, r2
 8000d24:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d26:	7952      	ldrb	r2, [r2, #5]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
	    	  Sensor_IVT.Datos.Tension_3 = aux * CONV_MIL;
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fcf7 	bl	8000720 <__aeabi_i2d>
 8000d32:	a31b      	add	r3, pc, #108	; (adr r3, 8000da0 <Gestion_Datos_Sensor_IVT+0x210>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fa76 	bl	8000228 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f7ff fd56 	bl	80007f4 <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000d4c:	6113      	str	r3, [r2, #16]
	        break;
 8000d4e:	e021      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>

	      case id_Msg_Result_T:
	    	  aux = (RX_CAN_DATA[2])+(RX_CAN_DATA[3]<<16)+(RX_CAN_DATA[4]<<8)+(RX_CAN_DATA[5]);
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	441a      	add	r2, r3
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4413      	add	r3, r2
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <Gestion_Datos_Sensor_IVT+0x220>)
 8000d68:	7952      	ldrb	r2, [r2, #5]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
	    	  Sensor_IVT.Datos.Temperatura = aux * CONV_CEN;
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fcd6 	bl	8000720 <__aeabi_i2d>
 8000d74:	a30c      	add	r3, pc, #48	; (adr r3, 8000da8 <Gestion_Datos_Sensor_IVT+0x218>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f7ff fa55 	bl	8000228 <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fd35 	bl	80007f4 <__aeabi_d2f>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <Gestion_Datos_Sensor_IVT+0x224>)
 8000d8e:	6153      	str	r3, [r2, #20]
	        break;
 8000d90:	e000      	b.n	8000d94 <Gestion_Datos_Sensor_IVT+0x204>
			break;
 8000d92:	bf00      	nop
	  }
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	f3af 8000 	nop.w
 8000da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000da4:	3f50624d 	.word	0x3f50624d
 8000da8:	9999999a 	.word	0x9999999a
 8000dac:	3fb99999 	.word	0x3fb99999
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	20000070 	.word	0x20000070

08000db8 <Start_IVT_Sensor>:
/**
  * @brief  Envío por bus CAN la señal de inico de la adquisición de datos.
  * @param  None
  * @retval None
  */
void Start_IVT_Sensor (void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

	Datos[0] = SET_MODE; Datos[1] = Run; Datos[2]=Run;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	705a      	strb	r2, [r3, #1]
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	709a      	strb	r2, [r3, #2]
	Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	71da      	strb	r2, [r3, #7]
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dd6:	79da      	ldrb	r2, [r3, #7]
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dda:	719a      	strb	r2, [r3, #6]
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dde:	799a      	ldrb	r2, [r3, #6]
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000de2:	715a      	strb	r2, [r3, #5]
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000de6:	795a      	ldrb	r2, [r3, #5]
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dea:	711a      	strb	r2, [r3, #4]
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000dee:	791a      	ldrb	r2, [r3, #4]
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000df2:	70da      	strb	r2, [r3, #3]

	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000df4:	4903      	ldr	r1, [pc, #12]	; (8000e04 <Start_IVT_Sensor+0x4c>)
 8000df6:	f240 4011 	movw	r0, #1041	; 0x411
 8000dfa:	f000 fa01 	bl	8001200 <Envio_CAN>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000068 	.word	0x20000068

08000e08 <Stop_IVT_Sensor>:
/**
  * @brief  Envío por bus CAN la señal de parada de adquisición de datos.
  * @param  None
  * @retval None
  */
void Stop_IVT_Sensor (void){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

	Datos[0] = SET_MODE; Datos[1] = Stop; Datos[2]=Run;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	705a      	strb	r2, [r3, #1]
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	709a      	strb	r2, [r3, #2]
	Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	71da      	strb	r2, [r3, #7]
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e26:	79da      	ldrb	r2, [r3, #7]
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e2a:	719a      	strb	r2, [r3, #6]
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e2e:	799a      	ldrb	r2, [r3, #6]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e32:	715a      	strb	r2, [r3, #5]
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e36:	795a      	ldrb	r2, [r3, #5]
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e3a:	711a      	strb	r2, [r3, #4]
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e3e:	791a      	ldrb	r2, [r3, #4]
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e42:	70da      	strb	r2, [r3, #3]

	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000e44:	4905      	ldr	r1, [pc, #20]	; (8000e5c <Stop_IVT_Sensor+0x54>)
 8000e46:	f240 4011 	movw	r0, #1041	; 0x411
 8000e4a:	f000 f9d9 	bl	8001200 <Envio_CAN>

	memset(&Sensor_IVT, 0x00, sizeof (Sensor_IVT)); /*!< Puesta a 0 estructura de datos adquiridos por sensor IVT */
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <Stop_IVT_Sensor+0x58>)
 8000e54:	f002 f9ee 	bl	8003234 <memset>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000068 	.word	0x20000068
 8000e60:	20000070 	.word	0x20000070

08000e64 <Guardado_IVT_Sensor>:
  * @brief  Envío por bus CAN la señal de guardado en memoria del sensor IVT.
  * 		Debe usarse cada vez que se modifique la configuración del sensor.
  * @param  None
  * @retval None
  */
void Guardado_IVT_Sensor (void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	Datos[0] = STORE;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e6a:	2232      	movs	r2, #50	; 0x32
 8000e6c:	701a      	strb	r2, [r3, #0]
	Datos[1] = Datos[2]= Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	71da      	strb	r2, [r3, #7]
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e76:	79da      	ldrb	r2, [r3, #7]
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e7a:	719a      	strb	r2, [r3, #6]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e7e:	799a      	ldrb	r2, [r3, #6]
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e82:	715a      	strb	r2, [r3, #5]
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e86:	795a      	ldrb	r2, [r3, #5]
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e8a:	711a      	strb	r2, [r3, #4]
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e8e:	791a      	ldrb	r2, [r3, #4]
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e92:	70da      	strb	r2, [r3, #3]
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e96:	78da      	ldrb	r2, [r3, #3]
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e9a:	709a      	strb	r2, [r3, #2]
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000e9e:	789a      	ldrb	r2, [r3, #2]
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000ea2:	705a      	strb	r2, [r3, #1]

	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000ea4:	4903      	ldr	r1, [pc, #12]	; (8000eb4 <Guardado_IVT_Sensor+0x50>)
 8000ea6:	f240 4011 	movw	r0, #1041	; 0x411
 8000eaa:	f000 f9a9 	bl	8001200 <Envio_CAN>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000068 	.word	0x20000068

08000eb8 <Init_IVT_Sensor>:
/**
  * @brief  Envío por bus CAN la configuración inicial del sensor IVT para I, U1,U2,U3 y T.
  * @param  None
  * @retval None
  */
void Init_IVT_Sensor (void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

	Stop_IVT_Sensor();
 8000ebc:	f7ff ffa4 	bl	8000e08 <Stop_IVT_Sensor>

	/** Configura muestreo continuo corriente cada 20ms 	(0x14) 	 */
	Datos[0] = IVT_Msg_Result_I; Datos[1] = Cyclic_Running; Datos[2] = 0;
 8000ec0:	4b54      	ldr	r3, [pc, #336]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	4b53      	ldr	r3, [pc, #332]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	705a      	strb	r2, [r3, #1]
 8000ecc:	4b51      	ldr	r3, [pc, #324]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	709a      	strb	r2, [r3, #2]
	Datos[3] = 0x14; Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000ed2:	4b50      	ldr	r3, [pc, #320]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ed4:	2214      	movs	r2, #20
 8000ed6:	70da      	strb	r2, [r3, #3]
 8000ed8:	4b4e      	ldr	r3, [pc, #312]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	71da      	strb	r2, [r3, #7]
 8000ede:	4b4d      	ldr	r3, [pc, #308]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ee0:	79da      	ldrb	r2, [r3, #7]
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ee4:	719a      	strb	r2, [r3, #6]
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ee8:	799a      	ldrb	r2, [r3, #6]
 8000eea:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000eec:	715a      	strb	r2, [r3, #5]
 8000eee:	4b49      	ldr	r3, [pc, #292]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ef0:	795a      	ldrb	r2, [r3, #5]
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ef4:	711a      	strb	r2, [r3, #4]
	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000ef6:	4947      	ldr	r1, [pc, #284]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ef8:	f240 4011 	movw	r0, #1041	; 0x411
 8000efc:	f000 f980 	bl	8001200 <Envio_CAN>

	/** Configura muestreo continuo tensión 1 cada 60ms 	(0x3C) 	 */
	Datos[0] = IVT_Msg_Result_U1; Datos[1] = Cyclic_Running; Datos[2] = 0;
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f02:	2221      	movs	r2, #33	; 0x21
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	705a      	strb	r2, [r3, #1]
 8000f0c:	4b41      	ldr	r3, [pc, #260]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	709a      	strb	r2, [r3, #2]
	Datos[3] = 0x3C; Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000f12:	4b40      	ldr	r3, [pc, #256]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f14:	223c      	movs	r2, #60	; 0x3c
 8000f16:	70da      	strb	r2, [r3, #3]
 8000f18:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	71da      	strb	r2, [r3, #7]
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f20:	79da      	ldrb	r2, [r3, #7]
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f24:	719a      	strb	r2, [r3, #6]
 8000f26:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f28:	799a      	ldrb	r2, [r3, #6]
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f2c:	715a      	strb	r2, [r3, #5]
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f30:	795a      	ldrb	r2, [r3, #5]
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f34:	711a      	strb	r2, [r3, #4]
	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000f36:	4937      	ldr	r1, [pc, #220]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f38:	f240 4011 	movw	r0, #1041	; 0x411
 8000f3c:	f000 f960 	bl	8001200 <Envio_CAN>

	/** Configura muestreo continuo tensión 2 cada 60ms 	(0x3C) 	 */
	Datos[0] = IVT_Msg_Result_U2; Datos[1] = Cyclic_Running; Datos[2] = 0;
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f42:	2222      	movs	r2, #34	; 0x22
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	705a      	strb	r2, [r3, #1]
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	709a      	strb	r2, [r3, #2]
	Datos[3] = 0x3C; Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f54:	223c      	movs	r2, #60	; 0x3c
 8000f56:	70da      	strb	r2, [r3, #3]
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	71da      	strb	r2, [r3, #7]
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f60:	79da      	ldrb	r2, [r3, #7]
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f64:	719a      	strb	r2, [r3, #6]
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f68:	799a      	ldrb	r2, [r3, #6]
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f6c:	715a      	strb	r2, [r3, #5]
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f70:	795a      	ldrb	r2, [r3, #5]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f74:	711a      	strb	r2, [r3, #4]
	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000f76:	4927      	ldr	r1, [pc, #156]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f78:	f240 4011 	movw	r0, #1041	; 0x411
 8000f7c:	f000 f940 	bl	8001200 <Envio_CAN>

	/** Configura muestreo continuo tensión 3 cada 60ms 	(0x3C) 	 */
	Datos[0] = IVT_Msg_Result_U3; Datos[1] = Cyclic_Running; Datos[2] = 0;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f82:	2223      	movs	r2, #35	; 0x23
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	705a      	strb	r2, [r3, #1]
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	709a      	strb	r2, [r3, #2]
	Datos[3] = 0x3C; Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f94:	223c      	movs	r2, #60	; 0x3c
 8000f96:	70da      	strb	r2, [r3, #3]
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	71da      	strb	r2, [r3, #7]
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fa0:	79da      	ldrb	r2, [r3, #7]
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fa4:	719a      	strb	r2, [r3, #6]
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fa8:	799a      	ldrb	r2, [r3, #6]
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fac:	715a      	strb	r2, [r3, #5]
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fb0:	795a      	ldrb	r2, [r3, #5]
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fb4:	711a      	strb	r2, [r3, #4]
	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000fb6:	4917      	ldr	r1, [pc, #92]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fb8:	f240 4011 	movw	r0, #1041	; 0x411
 8000fbc:	f000 f920 	bl	8001200 <Envio_CAN>

	/** Configura muestreo continuo temperatura cada 120ms 	(0x78) 	 */
	Datos[0] = IVT_Msg_Result_T; Datos[1] = Cyclic_Running; Datos[2] = 0;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fc2:	2224      	movs	r2, #36	; 0x24
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	705a      	strb	r2, [r3, #1]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	709a      	strb	r2, [r3, #2]
	Datos[3] = 0x78; Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fd4:	2278      	movs	r2, #120	; 0x78
 8000fd6:	70da      	strb	r2, [r3, #3]
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fe0:	79da      	ldrb	r2, [r3, #7]
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fe4:	719a      	strb	r2, [r3, #6]
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fe8:	799a      	ldrb	r2, [r3, #6]
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000fec:	715a      	strb	r2, [r3, #5]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ff0:	795a      	ldrb	r2, [r3, #5]
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ff4:	711a      	strb	r2, [r3, #4]
	Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8000ff6:	4907      	ldr	r1, [pc, #28]	; (8001014 <Init_IVT_Sensor+0x15c>)
 8000ff8:	f240 4011 	movw	r0, #1041	; 0x411
 8000ffc:	f000 f900 	bl	8001200 <Envio_CAN>

	Guardado_IVT_Sensor();
 8001000:	f7ff ff30 	bl	8000e64 <Guardado_IVT_Sensor>

	/** Configura velodcidad tranmsión 500kbit/s 				 	 */
	BitRate_IVT_Sensor	(kbits_500);
 8001004:	2004      	movs	r0, #4
 8001006:	f000 f807 	bl	8001018 <BitRate_IVT_Sensor>

	Stop_IVT_Sensor();
 800100a:	f7ff fefd 	bl	8000e08 <Stop_IVT_Sensor>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000068 	.word	0x20000068

08001018 <BitRate_IVT_Sensor>:
/**
  * @brief  Configura velocidad de transmisión del bus CAN del sensor IVT.
  * @param  Velocidades soportadas 250kbit/s, 500kbit/s y 1000Mbit/s.
  * @retval None
  */
void BitRate_IVT_Sensor	(CAN_IVT_CAN_BitRate_t Velocidad){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]

	  switch (Velocidad){
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b08      	cmp	r3, #8
 8001026:	d006      	beq.n	8001036 <BitRate_IVT_Sensor+0x1e>
 8001028:	2b08      	cmp	r3, #8
 800102a:	dc71      	bgt.n	8001110 <BitRate_IVT_Sensor+0xf8>
 800102c:	2b02      	cmp	r3, #2
 800102e:	d04c      	beq.n	80010ca <BitRate_IVT_Sensor+0xb2>
 8001030:	2b04      	cmp	r3, #4
 8001032:	d025      	beq.n	8001080 <BitRate_IVT_Sensor+0x68>
			  Datos[0] = RESTART_to_Bitrate; Datos[1] = Mbits_1000;
			  Datos[2] = Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
			  Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
			break;
	  }
}
 8001034:	e06c      	b.n	8001110 <BitRate_IVT_Sensor+0xf8>
			  Stop_IVT_Sensor();
 8001036:	f7ff fee7 	bl	8000e08 <Stop_IVT_Sensor>
			  Datos[0] = RESTART_to_Bitrate; Datos[1] = kbits_250;
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800103c:	223a      	movs	r2, #58	; 0x3a
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001042:	2208      	movs	r2, #8
 8001044:	705a      	strb	r2, [r3, #1]
			  Datos[2] = Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001048:	2200      	movs	r2, #0
 800104a:	71da      	strb	r2, [r3, #7]
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800104e:	79da      	ldrb	r2, [r3, #7]
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001052:	719a      	strb	r2, [r3, #6]
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001056:	799a      	ldrb	r2, [r3, #6]
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800105a:	715a      	strb	r2, [r3, #5]
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800105e:	795a      	ldrb	r2, [r3, #5]
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001066:	791a      	ldrb	r2, [r3, #4]
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800106a:	70da      	strb	r2, [r3, #3]
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800106e:	78da      	ldrb	r2, [r3, #3]
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001072:	709a      	strb	r2, [r3, #2]
			  Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8001074:	4928      	ldr	r1, [pc, #160]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001076:	f240 4011 	movw	r0, #1041	; 0x411
 800107a:	f000 f8c1 	bl	8001200 <Envio_CAN>
			break;
 800107e:	e047      	b.n	8001110 <BitRate_IVT_Sensor+0xf8>
			  Stop_IVT_Sensor();
 8001080:	f7ff fec2 	bl	8000e08 <Stop_IVT_Sensor>
			  Datos[0] = RESTART_to_Bitrate; Datos[1] = kbits_500;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001086:	223a      	movs	r2, #58	; 0x3a
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800108c:	2204      	movs	r2, #4
 800108e:	705a      	strb	r2, [r3, #1]
			  Datos[2]= Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001092:	2200      	movs	r2, #0
 8001094:	71da      	strb	r2, [r3, #7]
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001098:	79da      	ldrb	r2, [r3, #7]
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 800109c:	719a      	strb	r2, [r3, #6]
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010a0:	799a      	ldrb	r2, [r3, #6]
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010a4:	715a      	strb	r2, [r3, #5]
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010a8:	795a      	ldrb	r2, [r3, #5]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010ac:	711a      	strb	r2, [r3, #4]
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010b0:	791a      	ldrb	r2, [r3, #4]
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010b4:	70da      	strb	r2, [r3, #3]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010b8:	78da      	ldrb	r2, [r3, #3]
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010bc:	709a      	strb	r2, [r3, #2]
			  Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 80010be:	4916      	ldr	r1, [pc, #88]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010c0:	f240 4011 	movw	r0, #1041	; 0x411
 80010c4:	f000 f89c 	bl	8001200 <Envio_CAN>
			break;
 80010c8:	e022      	b.n	8001110 <BitRate_IVT_Sensor+0xf8>
			  Datos[0] = RESTART_to_Bitrate; Datos[1] = Mbits_1000;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010cc:	223a      	movs	r2, #58	; 0x3a
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	705a      	strb	r2, [r3, #1]
			  Datos[2] = Datos[3] = Datos[4] = Datos[5] = Datos[6] = Datos[7] = 0;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010d8:	2200      	movs	r2, #0
 80010da:	71da      	strb	r2, [r3, #7]
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010de:	79da      	ldrb	r2, [r3, #7]
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010e2:	719a      	strb	r2, [r3, #6]
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010e6:	799a      	ldrb	r2, [r3, #6]
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010ea:	715a      	strb	r2, [r3, #5]
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010ee:	795a      	ldrb	r2, [r3, #5]
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010f2:	711a      	strb	r2, [r3, #4]
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010f6:	791a      	ldrb	r2, [r3, #4]
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010fa:	70da      	strb	r2, [r3, #3]
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 80010fe:	78da      	ldrb	r2, [r3, #3]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001102:	709a      	strb	r2, [r3, #2]
			  Envio_CAN(ID_CAN_SENSOR_IVT, Datos);
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <BitRate_IVT_Sensor+0x100>)
 8001106:	f240 4011 	movw	r0, #1041	; 0x411
 800110a:	f000 f879 	bl	8001200 <Envio_CAN>
			break;
 800110e:	bf00      	nop
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000068 	.word	0x20000068

0800111c <Init_CAN>:
#include "Init_CAN.h"
#include "IVT_Sensor.h"

#define ID_CAN_DISPOSITIVO 0x100

void Init_CAN (void){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  //Configuracion periférico
  hcan1.Instance = CAN1;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <Init_CAN+0xd0>)
 8001122:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <Init_CAN+0xd4>)
 8001124:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <Init_CAN+0xd0>)
 8001128:	2205      	movs	r2, #5
 800112a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <Init_CAN+0xd0>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <Init_CAN+0xd0>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;		/** Recomendable para cálculo time quantas */
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <Init_CAN+0xd0>)
 800113a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800113e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;		/** http://www.bittiming.can-wiki.info 	   */
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <Init_CAN+0xd0>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <Init_CAN+0xd0>)
 8001148:	2200      	movs	r2, #0
 800114a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <Init_CAN+0xd0>)
 800114e:	2200      	movs	r2, #0
 8001150:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <Init_CAN+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <Init_CAN+0xd0>)
 800115a:	2200      	movs	r2, #0
 800115c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <Init_CAN+0xd0>)
 8001160:	2200      	movs	r2, #0
 8001162:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <Init_CAN+0xd0>)
 8001166:	2200      	movs	r2, #0
 8001168:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800116a:	4820      	ldr	r0, [pc, #128]	; (80011ec <Init_CAN+0xd0>)
 800116c:	f000 fa76 	bl	800165c <HAL_CAN_Init>
  {
	//Error_Handler();	   //JGD Generar Error
  }

  //Inicializado Recepciones
  RX_Header.IDE		= CAN_ID_STD;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <Init_CAN+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  RX_Header.StdId	= ID_CAN_DISPOSITIVO;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <Init_CAN+0xd8>)
 8001178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117c:	601a      	str	r2, [r3, #0]
  RX_Header.RTR		= CAN_RTR_DATA;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <Init_CAN+0xd8>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  RX_Header.DLC		= 8;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <Init_CAN+0xd8>)
 8001186:	2208      	movs	r2, #8
 8001188:	611a      	str	r2, [r3, #16]

  //Inicializado Envios
  TX_Header.IDE 	= CAN_ID_STD;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Init_CAN+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  TX_Header.StdId 	= ID_CAN_SENSOR_IVT;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <Init_CAN+0xdc>)
 8001192:	f240 4211 	movw	r2, #1041	; 0x411
 8001196:	601a      	str	r2, [r3, #0]
  TX_Header.RTR 	= CAN_RTR_DATA;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <Init_CAN+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  TX_Header.DLC 	= 8;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <Init_CAN+0xdc>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	611a      	str	r2, [r3, #16]

  //Inicializado Filtro Recepción
  sFilterConfig.FilterFIFOAssignment	= CAN_FILTER_FIFO0;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <Init_CAN+0xe0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh			= 0x245<<5;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <Init_CAN+0xe0>)
 80011ac:	f644 02a0 	movw	r2, #18592	; 0x48a0
 80011b0:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow				= 0;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <Init_CAN+0xe0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh		= 0;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <Init_CAN+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow			= 0;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Init_CAN+0xe0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale				= CAN_FILTERSCALE_32BIT;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <Init_CAN+0xe0>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation		= ENABLE;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <Init_CAN+0xe0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80011d0:	490a      	ldr	r1, [pc, #40]	; (80011fc <Init_CAN+0xe0>)
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <Init_CAN+0xd0>)
 80011d4:	f000 fb3e 	bl	8001854 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011d8:	2102      	movs	r1, #2
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <Init_CAN+0xd0>)
 80011dc:	f000 fe49 	bl	8001e72 <HAL_CAN_ActivateNotification>

  //Inicializado Perifercio
  HAL_CAN_Start(&hcan1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <Init_CAN+0xd0>)
 80011e2:	f000 fc17 	bl	8001a14 <HAL_CAN_Start>

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000009c 	.word	0x2000009c
 80011f0:	40006400 	.word	0x40006400
 80011f4:	200000c4 	.word	0x200000c4
 80011f8:	20000028 	.word	0x20000028
 80011fc:	20000040 	.word	0x20000040

08001200 <Envio_CAN>:


void Envio_CAN (uint32_t ID, uint8_t Datos_Envio[8]) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]

		TX_Header.StdId 	= ID;
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <Envio_CAN+0x2c>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6013      	str	r3, [r2, #0]

	if (HAL_CAN_AddTxMessage(&hcan1, &TX_Header, Datos_Envio, &TxMailbox) != HAL_OK)
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <Envio_CAN+0x30>)
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4905      	ldr	r1, [pc, #20]	; (800122c <Envio_CAN+0x2c>)
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <Envio_CAN+0x34>)
 8001218:	f000 fc40 	bl	8001a9c <HAL_CAN_AddTxMessage>
	{
	   //JGD Generar Error
	}
		HAL_Delay(20); //Delay necesario para vaciar mailbox de envíos
 800121c:	2014      	movs	r0, #20
 800121e:	f000 f9f9 	bl	8001614 <HAL_Delay>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000028 	.word	0x20000028
 8001230:	20000090 	.word	0x20000090
 8001234:	2000009c 	.word	0x2000009c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2238      	movs	r2, #56	; 0x38
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fff4 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001268:	2300      	movs	r3, #0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fae1 	bl	8002838 <HAL_RCC_OscConfig>
  {
	   //JGD Generar Error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800127a:	2301      	movs	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2101      	movs	r1, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fde8 	bl	8002e64 <HAL_RCC_ClockConfig>
  {
	   //JGD Generar Error
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <SystemClock_Config+0x6c>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	; 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	42420070 	.word	0x42420070

080012a8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <GPIO_Init+0x70>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a19      	ldr	r2, [pc, #100]	; (8001318 <GPIO_Init+0x70>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <GPIO_Init+0x70>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <GPIO_Init+0x70>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <GPIO_Init+0x70>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	6193      	str	r3, [r2, #24]
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <GPIO_Init+0x70>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <GPIO_Init+0x70>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <GPIO_Init+0x70>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <GPIO_Init+0x70>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <GPIO_Init+0x70>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <GPIO_Init+0x70>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <GPIO_Init+0x70>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <Init_HW>:

void Init_HW (void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	HAL_Init();
 8001320:	f000 f916 	bl	8001550 <HAL_Init>
	SystemClock_Config();
 8001324:	f7ff ff88 	bl	8001238 <SystemClock_Config>
	GPIO_Init();
 8001328:	f7ff ffbe 	bl	80012a8 <GPIO_Init>

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  Init_HW  				   ();
 8001334:	f7ff fff2 	bl	800131c <Init_HW>
  Init_CAN 				   ();
 8001338:	f7ff fef0 	bl	800111c <Init_CAN>
  Init_IVT_Sensor 		   ();
 800133c:	f7ff fdbc 	bl	8000eb8 <Init_IVT_Sensor>

  while (1)
  {
	  if(test ==1){
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <main+0x38>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d104      	bne.n	8001352 <main+0x22>
		 Start_IVT_Sensor  ();
 8001348:	f7ff fd36 	bl	8000db8 <Start_IVT_Sensor>
		 test =0;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <main+0x38>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
	  }

	  if(test ==2){
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <main+0x38>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d1f2      	bne.n	8001340 <main+0x10>
		 Stop_IVT_Sensor   ();
 800135a:	f7ff fd55 	bl	8000e08 <Stop_IVT_Sensor>
		 test =0;
 800135e:	4b02      	ldr	r3, [pc, #8]	; (8001368 <main+0x38>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
	  if(test ==1){
 8001364:	e7ec      	b.n	8001340 <main+0x10>
 8001366:	bf00      	nop
 8001368:	200000e8 	.word	0x200000e8

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_MspInit+0x5c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x5c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x60>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_MspInit+0x60>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000

080013d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_CAN_MspInit+0x9c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d139      	bne.n	8001464 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 80013f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fa:	61d3      	str	r3, [r2, #28]
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_CAN_MspInit+0xa0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	4619      	mov	r1, r3
 8001434:	480f      	ldr	r0, [pc, #60]	; (8001474 <HAL_CAN_MspInit+0xa4>)
 8001436:	f001 f87b 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_CAN_MspInit+0xa4>)
 8001450:	f001 f86e 	bl	8002530 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2014      	movs	r0, #20
 800145a:	f001 f832 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800145e:	2014      	movs	r0, #20
 8001460:	f001 f84b 	bl	80024fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40006400 	.word	0x40006400
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f88d 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <CAN1_RX0_IRQHandler+0x24>)
 80014ce:	f000 fcf5 	bl	8001ebc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RX_Header, RX_CAN_DATA) != HAL_OK)
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <CAN1_RX0_IRQHandler+0x28>)
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <CAN1_RX0_IRQHandler+0x2c>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <CAN1_RX0_IRQHandler+0x24>)
 80014da:	f000 fbb9 	bl	8001c50 <HAL_CAN_GetRxMessage>
    {
      //Error_Handler(); //JGD generar error
    }

  	  Gestion_Datos_Sensor_IVT (RX_Header.StdId);
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <CAN1_RX0_IRQHandler+0x2c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb54 	bl	8000b90 <Gestion_Datos_Sensor_IVT>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000009c 	.word	0x2000009c
 80014f0:	200000e0 	.word	0x200000e0
 80014f4:	200000c4 	.word	0x200000c4

080014f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <Reset_Handler>:
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopFillZerobss+0x12>)
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopFillZerobss+0x1a>)
 800150a:	2300      	movs	r3, #0
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:
 800150e:	58d4      	ldr	r4, [r2, r3]
 8001510:	50c4      	str	r4, [r0, r3]
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:
 8001514:	18c4      	adds	r4, r0, r3
 8001516:	428c      	cmp	r4, r1
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopFillZerobss+0x1e>)
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopFillZerobss+0x22>)
 800151e:	2300      	movs	r3, #0
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:
 8001526:	42a2      	cmp	r2, r4
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
 800152a:	f7ff ffe5 	bl	80014f8 <SystemInit>
 800152e:	f001 fe5d 	bl	80031ec <__libc_init_array>
 8001532:	f7ff fefd 	bl	8001330 <main>
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000
 800153c:	2000000c 	.word	0x2000000c
 8001540:	0800329c 	.word	0x0800329c
 8001544:	2000000c 	.word	0x2000000c
 8001548:	200000f0 	.word	0x200000f0

0800154c <ADC1_2_IRQHandler>:
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x28>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 ffa3 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fefe 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 ffbb 	bl	8002516 <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 ff83 	bl	80024c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_IncTick+0x20>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000008 	.word	0x20000008
 80015fc:	200000ec 	.word	0x200000ec

08001600 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	200000ec 	.word	0x200000ec

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fff0 	bl	8001600 <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffe0 	bl	8001600 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0ed      	b.n	800184a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fea8 	bl	80013d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ffb6 	bl	8001600 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001696:	e012      	b.n	80016be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001698:	f7ff ffb2 	bl	8001600 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0c5      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0e5      	beq.n	8001698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0202 	bic.w	r2, r2, #2
 80016da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016dc:	f7ff ff90 	bl	8001600 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016e2:	e012      	b.n	800170a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e4:	f7ff ff8c 	bl	8001600 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d90b      	bls.n	800170a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e09f      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e5      	bne.n	80016e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e1b      	ldrb	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e007      	b.n	8001742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e5b      	ldrb	r3, [r3, #25]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e9b      	ldrb	r3, [r3, #26]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e007      	b.n	8001796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0220 	bic.w	r2, r2, #32
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7edb      	ldrb	r3, [r3, #27]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0210 	orr.w	r2, r2, #16
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7f1b      	ldrb	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0208 	orr.w	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0208 	bic.w	r2, r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f5b      	ldrb	r3, [r3, #29]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e007      	b.n	8001814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d003      	beq.n	800187a <HAL_CAN_ConfigFilter+0x26>
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 80be 	bne.w	80019f6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_CAN_ConfigFilter+0x1bc>)
 800187c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001894:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2201      	movs	r2, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	401a      	ands	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d123      	bne.n	8001924 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3248      	adds	r2, #72	; 0x48
 8001904:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001918:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	3348      	adds	r3, #72	; 0x48
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d122      	bne.n	8001972 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800194c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3248      	adds	r2, #72	; 0x48
 8001952:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001966:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001968:	6979      	ldr	r1, [r7, #20]
 800196a:	3348      	adds	r3, #72	; 0x48
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	401a      	ands	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800198c:	e007      	b.n	800199e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019b8:	e007      	b.n	80019ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	431a      	orrs	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e8:	f023 0201 	bic.w	r2, r3, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e006      	b.n	8001a04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40006400 	.word	0x40006400

08001a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d12e      	bne.n	8001a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fdde 	bl	8001600 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a46:	e012      	b.n	8001a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a48:	f7ff fdda 	bl	8001600 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	d90b      	bls.n	8001a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2205      	movs	r2, #5
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e012      	b.n	8001a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e5      	bne.n	8001a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d003      	beq.n	8001ac8 <HAL_CAN_AddTxMessage+0x2c>
 8001ac0:	7ffb      	ldrb	r3, [r7, #31]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	f040 80b8 	bne.w	8001c38 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80a0 	beq.w	8001c28 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	0e1b      	lsrs	r3, r3, #24
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e09e      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e00f      	b.n	8001b56 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3318      	adds	r3, #24
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	3304      	adds	r3, #4
 8001b68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	7d1b      	ldrb	r3, [r3, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d111      	bne.n	8001b96 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3318      	adds	r3, #24
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	3304      	adds	r3, #4
 8001b94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061a      	lsls	r2, r3, #24
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3305      	adds	r3, #5
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	3204      	adds	r2, #4
 8001bb6:	7812      	ldrb	r2, [r2, #0]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	ea43 0200 	orr.w	r2, r3, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	6811      	ldr	r1, [r2, #0]
 8001bf4:	ea43 0200 	orr.w	r2, r3, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	6811      	ldr	r1, [r2, #0]
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e00e      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e006      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <HAL_CAN_GetRxMessage+0x24>
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f040 80f3 	bne.w	8001e5a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10e      	bne.n	8001c98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d116      	bne.n	8001cb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0e7      	b.n	8001e68 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0d8      	b.n	8001e68 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	331b      	adds	r3, #27
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0204 	and.w	r2, r3, #4
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10c      	bne.n	8001cee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	331b      	adds	r3, #27
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0d5b      	lsrs	r3, r3, #21
 8001ce4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e00b      	b.n	8001d06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	331b      	adds	r3, #27
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	331b      	adds	r3, #27
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0202 	and.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	331b      	adds	r3, #27
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 020f 	and.w	r2, r3, #15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	331b      	adds	r3, #27
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	331b      	adds	r3, #27
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0a1a      	lsrs	r2, r3, #8
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0c1a      	lsrs	r2, r3, #16
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3302      	adds	r3, #2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	0e1a      	lsrs	r2, r3, #24
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3303      	adds	r3, #3
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0a1a      	lsrs	r2, r3, #8
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3305      	adds	r3, #5
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0c1a      	lsrs	r2, r3, #16
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	3306      	adds	r3, #6
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e1a      	lsrs	r2, r3, #24
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	3307      	adds	r3, #7
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e006      	b.n	8001e68 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d002      	beq.n	8001e90 <HAL_CAN_ActivateNotification+0x1e>
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d109      	bne.n	8001ea4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6959      	ldr	r1, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e006      	b.n	8001eb2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07c      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f983 	bl	800222a <HAL_CAN_TxMailbox0CompleteCallback>
 8001f24:	e016      	b.n	8001f54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	e00c      	b.n	8001f54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	e002      	b.n	8001f54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f986 	bl	8002260 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d024      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f962 	bl	800223c <HAL_CAN_TxMailbox1CompleteCallback>
 8001f78:	e016      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	e00c      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e002      	b.n	8001fa8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f965 	bl	8002272 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d024      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f941 	bl	800224e <HAL_CAN_TxMailbox2CompleteCallback>
 8001fcc:	e016      	b.n	8001ffc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	e00c      	b.n	8001ffc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	e002      	b.n	8001ffc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f944 	bl	8002284 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2210      	movs	r2, #16
 800201e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2208      	movs	r2, #8
 800203a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f933 	bl	80022a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f91b 	bl	8002296 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2208      	movs	r2, #8
 800209e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f913 	bl	80022cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8fb 	bl	80022ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8fc 	bl	80022de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2208      	movs	r2, #8
 8002100:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8f4 	bl	80022f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d07b      	beq.n	800220a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d072      	beq.n	8002202 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002176:	2b00      	cmp	r3, #0
 8002178:	d043      	beq.n	8002202 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d03e      	beq.n	8002202 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800218a:	2b60      	cmp	r3, #96	; 0x60
 800218c:	d02b      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x32a>
 800218e:	2b60      	cmp	r3, #96	; 0x60
 8002190:	d82e      	bhi.n	80021f0 <HAL_CAN_IRQHandler+0x334>
 8002192:	2b50      	cmp	r3, #80	; 0x50
 8002194:	d022      	beq.n	80021dc <HAL_CAN_IRQHandler+0x320>
 8002196:	2b50      	cmp	r3, #80	; 0x50
 8002198:	d82a      	bhi.n	80021f0 <HAL_CAN_IRQHandler+0x334>
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d019      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x316>
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d826      	bhi.n	80021f0 <HAL_CAN_IRQHandler+0x334>
 80021a2:	2b30      	cmp	r3, #48	; 0x30
 80021a4:	d010      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x30c>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d822      	bhi.n	80021f0 <HAL_CAN_IRQHandler+0x334>
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d002      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x2f8>
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d005      	beq.n	80021be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021b2:	e01d      	b.n	80021f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021bc:	e019      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c6:	e014      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021d0:	e00f      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021da:	e00a      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021e4:	e005      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ee:	e000      	b.n	80021f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80021f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002200:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2204      	movs	r2, #4
 8002208:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f870 	bl	8002302 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	; 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4906      	ldr	r1, [pc, #24]	; (80023ac <__NVIC_EnableIRQ+0x34>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7ff ff90 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff2d 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff42 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff90 	bl	8002404 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5f 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff35 	bl	8002378 <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffa2 	bl	8002468 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b08b      	sub	sp, #44	; 0x2c
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002542:	e169      	b.n	8002818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002544:	2201      	movs	r2, #1
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 8158 	bne.w	8002812 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a9a      	ldr	r2, [pc, #616]	; (80027d0 <HAL_GPIO_Init+0x2a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d05e      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 800256c:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2a0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d875      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 8002572:	4a98      	ldr	r2, [pc, #608]	; (80027d4 <HAL_GPIO_Init+0x2a4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d058      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002578:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2a4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d86f      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 800257e:	4a96      	ldr	r2, [pc, #600]	; (80027d8 <HAL_GPIO_Init+0x2a8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d052      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002584:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_GPIO_Init+0x2a8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d869      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 800258a:	4a94      	ldr	r2, [pc, #592]	; (80027dc <HAL_GPIO_Init+0x2ac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d04c      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 8002590:	4a92      	ldr	r2, [pc, #584]	; (80027dc <HAL_GPIO_Init+0x2ac>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d863      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 8002596:	4a92      	ldr	r2, [pc, #584]	; (80027e0 <HAL_GPIO_Init+0x2b0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d046      	beq.n	800262a <HAL_GPIO_Init+0xfa>
 800259c:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_GPIO_Init+0x2b0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d85d      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d82a      	bhi.n	80025fc <HAL_GPIO_Init+0xcc>
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d859      	bhi.n	800265e <HAL_GPIO_Init+0x12e>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <HAL_GPIO_Init+0x80>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	0800262b 	.word	0x0800262b
 80025b4:	08002605 	.word	0x08002605
 80025b8:	08002617 	.word	0x08002617
 80025bc:	08002659 	.word	0x08002659
 80025c0:	0800265f 	.word	0x0800265f
 80025c4:	0800265f 	.word	0x0800265f
 80025c8:	0800265f 	.word	0x0800265f
 80025cc:	0800265f 	.word	0x0800265f
 80025d0:	0800265f 	.word	0x0800265f
 80025d4:	0800265f 	.word	0x0800265f
 80025d8:	0800265f 	.word	0x0800265f
 80025dc:	0800265f 	.word	0x0800265f
 80025e0:	0800265f 	.word	0x0800265f
 80025e4:	0800265f 	.word	0x0800265f
 80025e8:	0800265f 	.word	0x0800265f
 80025ec:	0800265f 	.word	0x0800265f
 80025f0:	0800265f 	.word	0x0800265f
 80025f4:	0800260d 	.word	0x0800260d
 80025f8:	08002621 	.word	0x08002621
 80025fc:	4a79      	ldr	r2, [pc, #484]	; (80027e4 <HAL_GPIO_Init+0x2b4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002602:	e02c      	b.n	800265e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	623b      	str	r3, [r7, #32]
          break;
 800260a:	e029      	b.n	8002660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	3304      	adds	r3, #4
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	e024      	b.n	8002660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	3308      	adds	r3, #8
 800261c:	623b      	str	r3, [r7, #32]
          break;
 800261e:	e01f      	b.n	8002660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	330c      	adds	r3, #12
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	e01a      	b.n	8002660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002632:	2304      	movs	r3, #4
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e013      	b.n	8002660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002640:	2308      	movs	r3, #8
 8002642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	611a      	str	r2, [r3, #16]
          break;
 800264a:	e009      	b.n	8002660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800264c:	2308      	movs	r3, #8
 800264e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	615a      	str	r2, [r3, #20]
          break;
 8002656:	e003      	b.n	8002660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
          break;
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x130>
          break;
 800265e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	d801      	bhi.n	800266a <HAL_GPIO_Init+0x13a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	e001      	b.n	800266e <HAL_GPIO_Init+0x13e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d802      	bhi.n	800267c <HAL_GPIO_Init+0x14c>
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	e002      	b.n	8002682 <HAL_GPIO_Init+0x152>
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	3b08      	subs	r3, #8
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	210f      	movs	r1, #15
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	401a      	ands	r2, r3
 8002694:	6a39      	ldr	r1, [r7, #32]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80b1 	beq.w	8002812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b0:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_GPIO_Init+0x2b8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c8:	4a48      	ldr	r2, [pc, #288]	; (80027ec <HAL_GPIO_Init+0x2bc>)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_GPIO_Init+0x2c0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_GPIO_Init+0x1ec>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <HAL_GPIO_Init+0x2c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00d      	beq.n	8002718 <HAL_GPIO_Init+0x1e8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3e      	ldr	r2, [pc, #248]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x1e4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_GPIO_Init+0x1e0>
 800270c:	2303      	movs	r3, #3
 800270e:	e006      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002710:	2304      	movs	r3, #4
 8002712:	e004      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002714:	2302      	movs	r3, #2
 8002716:	e002      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_GPIO_Init+0x1ee>
 800271c:	2300      	movs	r3, #0
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	f002 0203 	and.w	r2, r2, #3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4093      	lsls	r3, r2
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800272e:	492f      	ldr	r1, [pc, #188]	; (80027ec <HAL_GPIO_Init+0x2bc>)
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	492c      	ldr	r1, [pc, #176]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	43db      	mvns	r3, r3
 800275e:	4928      	ldr	r1, [pc, #160]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002760:	4013      	ands	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002770:	4b23      	ldr	r3, [pc, #140]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4922      	ldr	r1, [pc, #136]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	43db      	mvns	r3, r3
 8002786:	491e      	ldr	r1, [pc, #120]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 8002788:	4013      	ands	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4918      	ldr	r1, [pc, #96]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4914      	ldr	r1, [pc, #80]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d021      	beq.n	8002804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
 80027cc:	e021      	b.n	8002812 <HAL_GPIO_Init+0x2e2>
 80027ce:	bf00      	nop
 80027d0:	10320000 	.word	0x10320000
 80027d4:	10310000 	.word	0x10310000
 80027d8:	10220000 	.word	0x10220000
 80027dc:	10210000 	.word	0x10210000
 80027e0:	10120000 	.word	0x10120000
 80027e4:	10110000 	.word	0x10110000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_GPIO_Init+0x304>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	43db      	mvns	r3, r3
 800280c:	4909      	ldr	r1, [pc, #36]	; (8002834 <HAL_GPIO_Init+0x304>)
 800280e:	4013      	ands	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f ae8e 	bne.w	8002544 <HAL_GPIO_Init+0x14>
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	372c      	adds	r7, #44	; 0x2c
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e304      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8087 	beq.w	8002966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00c      	beq.n	800287e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002864:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d112      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287c:	d10b      	bne.n	8002896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d06c      	beq.n	8002964 <HAL_RCC_OscConfig+0x12c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d168      	bne.n	8002964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e2de      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x76>
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e02e      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x98>
 80028b6:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7a      	ldr	r2, [pc, #488]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a77      	ldr	r2, [pc, #476]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xbc>
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a71      	ldr	r2, [pc, #452]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xd4>
 80028f4:	4b6b      	ldr	r3, [pc, #428]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a67      	ldr	r2, [pc, #412]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe fe74 	bl	8001600 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fe70 	bl	8001600 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e292      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xe4>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fe60 	bl	8001600 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe fe5c 	bl	8001600 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e27e      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x10c>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e252      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fe15 	bl	8001600 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe fe11 	bl	8001600 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e233      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4927      	ldr	r1, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_OscConfig+0x270>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fdf4 	bl	8001600 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fdf0 	bl	8001600 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e212      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe fdd4 	bl	8001600 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fdd0 	bl	8001600 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1f2      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 fb98 	bl	80031b0 <RCC_Delay>
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fdba 	bl	8001600 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe fdb6 	bl	8001600 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1d8      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	42420000 	.word	0x42420000
 8002aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a6 	beq.w	8002c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	4b91      	ldr	r3, [pc, #580]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a90      	ldr	r2, [pc, #576]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a87      	ldr	r2, [pc, #540]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fd77 	bl	8001600 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe fd73 	bl	8001600 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e195      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4ec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x312>
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e02d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x334>
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a6f      	ldr	r2, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	e01c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x356>
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6213      	str	r3, [r2, #32]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x36e>
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fd27 	bl	8001600 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fd23 	bl	8001600 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e143      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x37e>
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fd11 	bl	8001600 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fd0d 	bl	8001600 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e12d      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ee      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a44      	ldr	r2, [pc, #272]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 808c 	beq.w	8002d38 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d10e      	bne.n	8002c4c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e103      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d14e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002c54:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0ef      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_RCC_OscConfig+0x4f0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fcc1 	bl	8001600 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002c82:	f7fe fcbd 	bl	8001600 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0df      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002c94:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	491c      	ldr	r1, [pc, #112]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4918      	ldr	r1, [pc, #96]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x4f0>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc99 	bl	8001600 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002cd2:	f7fe fc95 	bl	8001600 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0b7      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x49a>
 8002cf0:	e022      	b.n	8002d38 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x4f0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc7c 	bl	8001600 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002d0a:	e00f      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d0c:	f7fe fc78 	bl	8001600 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d908      	bls.n	8002d2c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e09a      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e9      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8088 	beq.w	8002e52 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d068      	beq.n	8002e20 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d14d      	bne.n	8002df2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x628>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fc50 	bl	8001600 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fc4c 	bl	8001600 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e06e      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8a:	d10f      	bne.n	8002dac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4931      	ldr	r1, [pc, #196]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f023 020f 	bic.w	r2, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	492d      	ldr	r1, [pc, #180]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	4927      	ldr	r1, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_RCC_OscConfig+0x628>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fc19 	bl	8001600 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fc15 	bl	8001600 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e037      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x59a>
 8002df0:	e02f      	b.n	8002e52 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x628>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe fc02 	bl	8001600 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fbfe 	bl	8001600 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e020      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c8>
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e013      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x624>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	42420060 	.word	0x42420060

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0d0      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4965      	ldr	r1, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d040      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e073      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fb54 	bl	8001600 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe fb50 	bl	8001600 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e053      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4922      	ldr	r1, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1cc>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fab2 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	0800327c 	.word	0x0800327c
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b091      	sub	sp, #68	; 0x44
 800303c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_GetSysClockFreq+0x160>)
 8003040:	f107 0414 	add.w	r4, r7, #20
 8003044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003046:	c407      	stmia	r4!, {r0, r1, r2}
 8003048:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCC_GetSysClockFreq+0x164>)
 800304c:	1d3c      	adds	r4, r7, #4
 800304e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
 800305c:	2300      	movs	r3, #0
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d002      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x4e>
 8003080:	2b08      	cmp	r3, #8
 8003082:	d003      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x54>
 8003084:	e080      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800308a:	e080      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003098:	4413      	add	r3, r2
 800309a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d066      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80030b6:	4413      	add	r3, r2
 80030b8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d044      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80030ca:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	3301      	adds	r3, #1
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80030d8:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3302      	adds	r3, #2
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	4618      	mov	r0, r3
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	fb02 f501 	mul.w	r5, r2, r1
 80030fa:	fb00 f403 	mul.w	r4, r0, r3
 80030fe:	442c      	add	r4, r5
 8003100:	fba0 2302 	umull	r2, r3, r0, r2
 8003104:	18e1      	adds	r1, r4, r3
 8003106:	460b      	mov	r3, r1
 8003108:	4926      	ldr	r1, [pc, #152]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800310a:	fb01 f003 	mul.w	r0, r1, r3
 800310e:	2100      	movs	r1, #0
 8003110:	fb01 f102 	mul.w	r1, r1, r2
 8003114:	4401      	add	r1, r0
 8003116:	4823      	ldr	r0, [pc, #140]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003118:	fba2 4500 	umull	r4, r5, r2, r0
 800311c:	194b      	adds	r3, r1, r5
 800311e:	461d      	mov	r5, r3
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	4618      	mov	r0, r3
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	461a      	mov	r2, r3
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	fb02 fc01 	mul.w	ip, r2, r1
 8003134:	fb00 f603 	mul.w	r6, r0, r3
 8003138:	4466      	add	r6, ip
 800313a:	fba0 2302 	umull	r2, r3, r0, r2
 800313e:	18f1      	adds	r1, r6, r3
 8003140:	460b      	mov	r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd fba5 	bl	8000894 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4613      	mov	r3, r2
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003152:	e007      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003158:	fb02 f203 	mul.w	r2, r2, r3
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003164:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003168:	461a      	mov	r2, r3
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003176:	e004      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x170>)
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_GetSysClockFreq+0x174>)
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003190:	4618      	mov	r0, r3
 8003192:	3744      	adds	r7, #68	; 0x44
 8003194:	46bd      	mov	sp, r7
 8003196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003198:	0800325c 	.word	0x0800325c
 800319c:	0800326c 	.word	0x0800326c
 80031a0:	40021000 	.word	0x40021000
 80031a4:	017d7840 	.word	0x017d7840
 80031a8:	003d0900 	.word	0x003d0900
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <RCC_Delay+0x34>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <RCC_Delay+0x38>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031cc:	bf00      	nop
  }
  while (Delay --);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	60fa      	str	r2, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <RCC_Delay+0x1c>
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	20000000 	.word	0x20000000
 80031e8:	10624dd3 	.word	0x10624dd3

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2600      	movs	r6, #0
 80031f0:	4d0c      	ldr	r5, [pc, #48]	; (8003224 <__libc_init_array+0x38>)
 80031f2:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	f000 f822 	bl	8003244 <_init>
 8003200:	2600      	movs	r6, #0
 8003202:	4d0a      	ldr	r5, [pc, #40]	; (800322c <__libc_init_array+0x40>)
 8003204:	4c0a      	ldr	r4, [pc, #40]	; (8003230 <__libc_init_array+0x44>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f855 3b04 	ldr.w	r3, [r5], #4
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f855 3b04 	ldr.w	r3, [r5], #4
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003294 	.word	0x08003294
 8003228:	08003294 	.word	0x08003294
 800322c:	08003294 	.word	0x08003294
 8003230:	08003298 	.word	0x08003298

08003234 <memset>:
 8003234:	4603      	mov	r3, r0
 8003236:	4402      	add	r2, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <_init>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr

08003250 <_fini>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr
